type User {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  birthDate: Date!
  gender: String!
  nickName: String
  profilePicture: String
  hometown: String
  relationship: String
  aboutMe: String
}

type GetUserPayload {
  id: String
  nickName: String
  profilePicture: String
  email: String
  youSent: Boolean
  heSent: Boolean
  notYet: Boolean
  friendRequestId: String
  isFriend: Boolean
  errors: Error
}

type FriendRequest {
  id: String
  senderEmail: String
}

type Query {
  getUser(email: String!): GetUserPayload!
  getProfile(id: String!): User
  getMyFriends: [User]!
  getMyFriendRequests: [FriendRequest]!
  me: User!
  hello: String!
}

type AuthPayload {
  isOk: Boolean!
  token: String
  user: User
  errors: [Error]
}

type Mutation {
  signup(
    firstName: String!
    lastName: String!
    password: String!
    email: String!
    birthDate: Date!
    gender: String!
    nickName: String
    profilePicture: Upload
    hometown: String
    relationship: String
    aboutMe: String
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  updateUserBasicInfo(
    id: String!
    firstName: String
    lastName: String
    birthDate: Date
    gender: String
    nickName: String
    hometown: String
    relationship: String
    aboutMe: String
  ): AuthPayload
  updateUserProfilePicture(id: String!, profilePicture: Upload): AuthPayload
  updateUserPassword(
    id: String!
    oldPassword: String
    newPassword: String
  ): AuthPayload
  deleteUser(id: String!): Boolean
  ####
  sendFriendRequest(userId: String!): Boolean!
  acceptFriendRequest(friendRequestId: String!): Boolean!
}
